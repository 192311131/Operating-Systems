#include <stdio.h>

void bestFit(int memory[], int m, int process[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;  // Initialize allocation as unallocated
    }

    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (memory[j] >= process[i]) {
                if (bestIdx == -1 || memory[j] < memory[bestIdx]) {
                    bestIdx = j;  // Find the smallest suitable block
                }
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            memory[bestIdx] -= process[i];  // Reduce block size
        }
    }

    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, process[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int memory[] = {100, 500, 200, 300, 600};
    int process[] = {212, 417, 112, 426};
    int m = sizeof(memory) / sizeof(memory[0]);
    int n = sizeof(process) / sizeof(process[0]);

    bestFit(memory, m, process, n);

    return 0;
}
