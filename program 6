#include <stdio.h>
#include <limits.h>

struct Process {
    int id;          // Process ID
    int burst_time;  // Burst Time
    int remaining_time; // Remaining Burst Time
    int priority;    // Priority (smaller number = higher priority)
    int arrival_time; // Arrival Time
    int waiting_time;
    int turnaround_time;
};

void preemptivePriority(int n, struct Process processes[]) {
    int completed = 0, time = 0;
    int total_wait = 0, total_turn = 0;

    while (completed < n) {
        int idx = -1;
        int min_priority = INT_MAX;

        // Select the process with the highest priority among arrived processes
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0 && processes[i].priority < min_priority) {
                min_priority = processes[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            processes[idx].remaining_time--;

            if (processes[idx].remaining_time == 0) {
                completed++;
                int finish_time = time + 1;
                processes[idx].turnaround_time = finish_time - processes[idx].arrival_time;
                processes[idx].waiting_time = processes[idx].turnaround_time - processes[idx].burst_time;

                total_wait += processes[idx].waiting_time;
                total_turn += processes[idx].turnaround_time;
            }
        }

        time++;
    }

    // Display results
    printf("Process\tPriority\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
               processes[i].id, processes[i].priority, processes[i].arrival_time,
               processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wait / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turn / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter priority for process P%d: ", i + 1);
        scanf("%d", &processes[i].priority);

        processes[i].remaining_time = processes[i].burst_time;
    }

    preemptivePriority(n, processes);
    return 0;
}
