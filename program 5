#include <stdio.h>

struct Process {
    int id;          // Process ID
    int burst_time;  // Burst Time
    int priority;    // Priority (smaller number = higher priority)
    int waiting_time;
    int turnaround_time;
};

void priorityScheduling(int n, struct Process processes[]) {
    // Sort processes based on priority (ascending order)
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Calculate waiting and turnaround times
    processes[0].waiting_time = 0;  // First process has no waiting time
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    // Display results
    printf("Process\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].priority, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    // Calculate and display average waiting and turnaround times
    float total_wait = 0, total_turn = 0;
    for (int i = 0; i < n; i++) {
        total_wait += processes[i].waiting_time;
        total_turn += processes[i].turnaround_time;
    }
    printf("\nAverage Waiting Time: %.2f", total_wait / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turn / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter priority for process P%d: ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    priorityScheduling(n, processes);
    return 0;
}
