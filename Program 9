#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <unistd.h>

#define SHM_SIZE 1024

int main() {
    // Create unique key
    key_t key = ftok("shmfile", 65);

    // Create shared memory segment
    int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach to shared memory
    char *data = (char *)shmat(shmid, NULL, 0);
    if (data == (char *)-1) {
        perror("shmat");
        exit(1);
    }

    // Fork to create producer and consumer processes
    if (fork() == 0) {
        // Producer: Write to shared memory
        strcpy(data, "Hello from Producer!");
        printf("Producer: Data written to shared memory.\n");
        sleep(1);  // Simulate delay
        shmdt(data); // Detach shared memory
    } else {
        // Consumer: Read from shared memory
        sleep(2);  // Ensure producer writes first
        printf("Consumer: Data read from shared memory: %s\n", data);
        shmdt(data); // Detach shared memory
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory
    }

    return 0;
}
